/**
   Handling of general expressions
   
   usage
   
   [l, r]:oppart(expr, predicate)
   
   The idea is based on the pattern matcher in Richard Fateman's paper 
   "Partitioning of Algebraic Subexpressions in Computer Algebra Systems: Or, Donâ€™t use matching so much.Including a neat integration example"
   https://people.eecs.berkeley.edu/~fateman/papers/partition-new2.pdf
   

(C) - Dimiter Prodanov, 2015 - 2017
 
@license This library is free software; you can redistribute it and/or
        modify it under the terms of the GNU Lesser General Public
        License as published by the Free Software Foundation; either
        version 2.1 of the License, or (at your option) any later version.
  
        This library is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
         Lesser General Public License for more details.
  
        You should have received a copy of the GNU Lesser General Public
        License along with this library; if not, write to the Free Software
        Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
		
*/

inop(expr):= if not mapatom (expr)  then inpart(expr, 0) else 'nil;
inargs(expr):= if not mapatom (expr)  then  substinpart( "[", expr, 0) else 'nil;

/*
partition by predicate with expression reconstruction
literal meaning
*/
oppart(expr, predf):=block(
	[sop, lst, lsttrue:[], lstfalse:[], ltrue, lfalse, err ],
	mode_declare([lsttrue, lstfalse, lst, err], list),
	if mapatom(expr) then (
		if apply(predf, [expr]) then (ltrue:expr, lfalse:'nil)
		else (lfalse:expr, ltrue:'nil),
		return( [ltrue, lfalse])
	) else (
		sop:inop(expr),
		expr:rest(expr, 0),
		lst: inargs(expr),
		if _debug=true then display( sop, lst), 
		for v in lst do (
			if apply(predf, [v]) then push(v, lsttrue) 
			else push(v, lstfalse)
		),
		lsttrue:reverse(lsttrue),
		lstfalse:reverse(lstfalse),
		if _debug=true then display(lsttrue, lstfalse),  
		err:errcatch (
			ltrue:if not emptyp(lsttrue) then 
				/*substinpart(sop, lsttrue, 0) */
				implodeop(lsttrue, sop)
				else 'nil,
			lfalse:if not emptyp(lstfalse) then 
				/*substinpart(sop, lstfalse, 0) */
				implodeop(lstfalse, sop)
				else 'nil,
		 	if _debug=true then display( ltrue, lfalse), 
			lst:[ ltrue, lfalse]
		),
		if emptyp(err) then ['nil, 'nil ]
	),
	lst
);

/* 
splits an expression by occurencess of an operator
*/
explodeop(expr, sop):=block([lst, w],
	if mapatom(expr) then return ([expr]), 
	lst: inargs(expr),
	lreduce(append, map(lambda([w],   explodeop(w, sop)), lst))
);

/*
combinees a list by an operator
*/
implodeop(lsta, sop):=block([w],
	if not listp(lsta) then return (lsta),
	xreduce(sop, maplist(lambda([w], implodeop(w, sop)), lsta))
);

/*
 factor by subexpression
*/
factorby(expr, z):=block([quot, res, ret, ee, u, n, sop, %qq, radsubstflag:true ],
	if emptyp(z) then return (expr),
	if atom(expr) then return (expr),
	if matrixp(expr) then 
		return(matrixmap(lambda([u], factorby(u, z)), expr)),
	if listp(expr) then 
		ret: maplist(lambda([u], factorby(u, z)), expr)
	else (
		if listp(z) then z:flatten(z)
		else z:[z],	
		sop:op(expr),
		if _debug=true then display(expr, sop ),
		if sop="*" then 
			ret:map( lambda([u], factorby(u, z) ), expr)
		else if sop="/" then 
			ret:factorby(num(expr), z)/factorby(denom(expr), z)
		else	if sop="^" then (
			[ee, n]:args(expr),
			ret:factorby(ee, z),
			ret:ret^n
		) else (			 
			if inop(z[1]) = "^" then (
				[ee, n]:inargs(z[1]),
				assume(%qq>0),
				expr:ratsubst(%qq, ee, expr),
				expr:ratsubst(%qq^(1/n), %qq, expr),
				/*display(ee, n),*/
				[quot, res]:divide(expr, %qq),
				/*display(quot, res, expr),*/
				res:subst(z[1], %qq, res),
				quot:subst(z[1], %qq, quot),
				quot:radcan(quot)
			) else
				[quot, res]:divide(expr, z[1]),
			if length(z)>1 then
				res:factorby(res, rest(z)),
				if res#0 then
					ret:factor(quot)*z[1]+res
				else ret:quot*z[1]+res
		)
	),
	ret
);

put('operpart, 'v2,'version);
put('operpart, "Dimiter Prodanov", 'author);
put('operpart, "(C) - Dimiter Prodanov, 2015 - 2017", 'copyright);
